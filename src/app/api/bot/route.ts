import process from 'process';

import { Bot } from 'grammy';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

import escapeMessage from '../../../shared/lib/escape-message';

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;

if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN environment variable not found.');
}

const bot = new Bot(token);
const adminChatId = 517746645; // ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message:text', async (ctx) => {
  await ctx.reply(ctx.message.text);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
export const POST = async (req: NextRequest): Promise<NextResponse> => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const data = await req.json();

  if (!data) {
    return new NextResponse('Bad Request', { status: 400 });
  }
  const { name, phone, budget } = data;

  const formattedMessage = `
‚ú® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é* ‚ú®

üë§ *–ò–º—è:* ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}

`;
  try {
    await bot.api.sendMessage(adminChatId, escapeMessage(formattedMessage), {
      parse_mode: 'MarkdownV2',
    });
    return new NextResponse('OK', { status: 200 });
  } catch {
    return new NextResponse('Internal Server Error', { status: 500 });
  }
};
