import process from 'process';

import { Bot } from 'grammy';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

import escapeMessage from '../../../shared/lib/escape-message';

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;

if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN environment variable not found.');
}

const bot = new Bot(token);
const adminChatId = 691976114; // ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

export const POST = async (req: NextRequest): Promise<NextResponse> => {
  try {
    const data = await req.json();

    if (!data) {
      return new NextResponse('Bad Request', { status: 400 });
    }

    const {
      name,
      phone,
      email,
      deliveryMethod,
      address,
      comment,
      artikul,
      title,
    } = data;

    const deliveryText = {
      pickup: '–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞',
      moscow: '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥. –ú–æ—Å–∫–≤–∞ –∏ –ú–û',
      regions: '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã –†–§',
    } as const; // –î–æ–±–∞–≤–ª—è–µ–º 'as const' –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞

    const deliveryMethodKey = deliveryMethod as keyof typeof deliveryText;

    const deliveryMessage = deliveryText[deliveryMethodKey] || '–ù–µ —É–∫–∞–∑–∞–Ω';

    const formattedMessage = `
‚ú® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑* ‚ú®

üë§ *–ò–º—è:* ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß *Email:* ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üöö *–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:* ${deliveryMessage}
üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üì¶ *–ê—Ä—Ç–∏–∫—É–ª:* ${artikul || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìú *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* ${title || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üïí *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* ${new Date().toLocaleString()}
`;

    await bot.api.sendMessage(adminChatId, escapeMessage(formattedMessage), {
      parse_mode: 'MarkdownV2',
    });

    return new NextResponse('OK', { status: 200 });
  } catch {
    return new NextResponse('Internal Server Error', { status: 500 });
  }
};
